EXPLANATION OF FIELDS

#<virtual number> <NL>
        this number is = to your highest room number/100.  Thus, if your
        last room is 28799, you have virtual number 287.

<name of zone> <!NL> ~ <NL>
        NOT Brutius's area!  Snake Land or something descriptive.  Add your
        characters name in parenthesis so you get credit.  This is the name
        shown when you do SHOW ZONE command.

<highest virtual room number> <!NL>

<lifespan of zone> <!NL>
        how long the zone is active before it resets.  (in ticks = 75 secs)
        15 is very short, 30 is average.

<reset code> <NL>
        0:      zone never resets, the age of the zone is never updated.
                Ex: ASGARD
        1:      reset the zone as it is deserted.  i.e. IF-EMPTY.  When all
                players have left, it resets.
                Ex: The ambush
        2:      resets the zone when age = lifespan regardless of who or what
                is in it.  (normal reset code)

<command> <NL>

Each command consists of: a letter specifying command type, an if-flag, and a
few parameters.  The command letters are one of the following (dealt with in
detail below): O, G, E, M, P, D.  The if-flag is used as a conditional of
loading.  if if-flag = 0, then it will always load, if if-flag=1 then it
only loads if command above it loaded (useful for loading equipment on
creatures)

*******************
M:  (load a monster)

format:  M <if-flag> <mobile virtual number> <max existing> <virtual room>

if-flag is most likely 0.
Room and mobile virtual number is Vnum from .wld and .mob file.

max existing: the most number of this monster that will concurrently exist.
If you have 8 janitors, and 3 of them are killed, when it resets, the first
3 commands specifying "load a janitor" will be executed.  This may cause
"piling up" of janitors in one place if they are SENTINEL.  To get around
piling up, design individual mob types: chessboard has 16 different pawn
mobs, 1 for each square (show mob pawn).

*********************
E: (equip the mob with an item)

format:  E <if-flag> <object virtual number> <max existing> <equipment position>

if-flag is most likely 1.
Obj Vum is from .obj (self-explanatory).

Max existing is similar to above.
Let's say you have 8 cityguards, all of whom have long swords.  You set
max existing to 8.  3 are killed, and one person junks the long sword he got
from the corpse.  When zone resets, the first 3 guards will load, since only
7 long swords are in the game (assuming no one else comes in from rent with
one) (5 still on mobs, 2 from dead guards somewhere else) then the first guard
will load with a longsword, and the other two will load without one.  If one
is brought in from rent, it won't load.

equipment position is where the item is equipped:
NOTE: mobs are under same level/alignment restrictions as players.  Make sure
your mobs can use item or it will zap off them.
NOTE: use some sense, you _can_ force an item to be worn in a place that a
player can't.  (bracelet could be wielded even if it is not set wieldable)
Using this method ignores that check but stupid things (above) will probably
just cause problems.  Use this to advantage by making a mob HOLD a key that
isn't set holdable.

WEAR_LIGHT      0               WEAR_ARMS       10
WEAR_FINGER_R   1               WEAR_SHIELD     11
WEAR_FINGER_L   2               WEAR_ABOUT      12
WEAR_NECK_1     3               WEAR_WAIST      13
WEAR_NECK_2     4               WEAR_WRIST_R    14
WEAR_BODY       5               WEAR_WRIST_L    15
WEAR_HEAD       6               WIELD           16
WEAR_LEGS       7               HOLD            17
WEAR_FEET       8               WEAR_EARRING    18
WEAR_HANDS      9               WEAR_GOGGLES    19

***********************
G  (give an item to a mob)

format:  G <if-flag> <object virtual number> <max existing>

if-flag is most likely 1.
Obj Vum is from .obj (self-explanatory).
Max existing is similar to above for equip.

***********************
P  (put an item in a container)

format:  P <if-flag> <object virtual number> <max existing> <container Vnum>

if-flag is most likely 1.
Obj Vum is from .obj (self-explanatory).
Max existing is similar to above for equip.

Obviously, load the container object, then put the next command as a P with
if-flag 1  (i container doesn't load, object should't)

**********************
O (load an object in a room)

format:  D <if-flag> <obj virtual number> <max existing> <room Vnum>

if-flag is probably 0
This is for loading stuff like tables, book cases, etc.

***********************
D (reset a door)

format:  D <if-flag> <room virtual number> <exit direction number> <state>

if-flag is probably 0
room Vnum is obvious.  Exit direction is 0=n, 1=e ... 5=down
state:  0 = open, unlocked
        1 = closed
        2 = closed, locked

doors must be closed from both sides.  i.e.  most doors will require 2
commands.

